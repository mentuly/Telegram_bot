import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import BOT_TOKEN, IS_TEST_MODE, SEND_TIME, TIMEZONE
from database import add_user, get_users, update_last_sent, mark_incomplete, mark_complete, get_incomplete_tasks, update_user_name, get_user_name, delete_user
from lessons import lessons
from datetime import datetime

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InputFile

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

class RegisterStates(StatesGroup):
    waiting_for_name = State()

@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    existing_users = [user[0] for user in get_users()]

    if user_id not in existing_users:
        add_user(user_id)
        await state.set_state(RegisterStates.waiting_for_name)
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –Ω–∞–∑–∏–≤–∞—Ç–∏? üôÇ")
    else:
        user_name = get_user_name(user_id)
        if user_name:
            await send_intro_message(message, user_name)
        else:
            await state.set_state(RegisterStates.waiting_for_name)
            await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –Ω–∞–∑–∏–≤–∞—Ç–∏? üôÇ")

@dp.message(RegisterStates.waiting_for_name)
async def handle_name_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text.strip()
    update_user_name(user_id, user_name)

    await state.clear()
    await message.answer(f"–î—è–∫—É—é, {user_name}! –†–∞–¥—ñ–π–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤—É üöÄ")
    await send_intro_message(message, user_name)

async def send_intro_message(message: Message, user_name: str):
    await message.answer(
        text=(
            f"–ù—É —â–æ –∂, {user_name} ‚Äî –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç–∞–≤.\n"
            "–ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∂–µ —á–µ–∫–∞—î.\n"
            "–ë–µ–∑ —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é. –ë–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω—å.\n"
            "–ü—Ä–æ—Å—Ç–æ —Ç–∏, —Ä—É—á–∫–∞ —ñ –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é.\n\n"
            "–ì–æ—Ç–æ–≤–∏–π(-–∞) –ø–æ—á–∞—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑?"
        ),
        reply_markup=start_keyboard().as_markup()
    )

def start_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –¢–∞–∫, –ø–æ—ó—Ö–∞–ª–∏!", callback_data="go_ahead")
    builder.button(text="üçµ –Ø —â–µ –∑ —á–∞—î–º, –Ω–∞—Å—Ç—Ä—ñ–π –ª–æ–≤–ª—é", callback_data="wait")
    builder.button(text="üôÉ –ù–µ —Å—å–æ–≥–æ–¥–Ω—ñ, –∞–ª–µ —è –ø–æ–≤–µ—Ä–Ω—É—Å—å", callback_data="not_today")
    builder.adjust(1)
    return builder

@dp.message(Command("delete"))
async def delete_account_handler(message: Message):
    user_id = message.from_user.id
    delete_user(user_id)
    await message.answer("–¢–≤—ñ–π –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ")

@dp.message(Command("complete_task"))
async def complete_task_handler(message: Message):
    user_id = message.from_user.id
    incomplete_days = get_incomplete_tasks(user_id)

    if not incomplete_days:
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å üéâ")
        return

    buttons = [
        [InlineKeyboardButton(text=f"–î–µ–Ω—å {day + 1}", callback_data=f"select_day:{day}")]
        for day in incomplete_days
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—Ç–µ –ø–æ–∑–Ω–∞—á–∏—Ç–∏:", reply_markup=keyboard)

@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    data = callback.data
    user_id = callback.from_user.id

    if data.startswith("select_day:"):
        day = int(data.split(":")[1])
        text = f"\U0001F4CC –î–µ–Ω—å {day + 1}: {lessons[day]}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"complete:{day}"),
             InlineKeyboardButton(text="‚ùå –í—Å–µ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"incomplete:{day}")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    elif data.startswith("complete:"):
        day = int(data.split(":")[1])
        mark_complete(user_id, day)
        await callback.message.edit_reply_markup()
        await callback.answer("–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚úÖ")

    elif data.startswith("incomplete:"):
        day = int(data.split(":")[1])
        mark_incomplete(user_id, day)
        await callback.message.edit_reply_markup()
        await callback.answer("–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ù–ï –≤–∏–∫–æ–Ω–∞–Ω–µ ‚ùå")

    elif data == "go_ahead":
        await callback.message.answer("–í–∞—É, –∫–ª–∞—Å! –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚Äî —Ç–≤–æ—è. Let's begin. ‚ú®")
        text = lessons[0]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data="complete:0"),
             InlineKeyboardButton(text="‚ùå –í—Å–µ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data="incomplete:0")]
        ])
        await callback.message.answer(f"\U0001F4DA {text}", reply_markup=keyboard)
        await callback.answer()

    elif data == "wait":
        await callback.message.answer("–ê–±—Å–æ–ª—é—Ç–Ω–æ –æ–∫–µ–π. Influbook –Ω–µ —Ç—ñ–∫–∞—î. –ú–∏ —á–µ–∫–∞—Ç–∏–º–µ–º–æ —Ç–≤—ñ–π –∑–Ω–∞–∫ ‚òïÔ∏è")
        await callback.answer()

    elif data == "not_today":
        await callback.message.answer("–ì–æ–ª–æ–≤–Ω–µ ‚Äî –Ω–µ –∑–Ω–∏–∫ –Ω–∞–∑–∞–≤–∂–¥–∏. –ö–æ–ª–∏ –∑–∞—Ö–æ—á–µ—à ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ‚Äú—Å—Ç–∞—Ä—Ç‚Äù —ñ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –∑ —Ç–æ–≥–æ, –¥–µ —Ç–∏ –∑—É–ø–∏–Ω–∏–≤—Å—è(-–ª–∞—Å—å) üåô")
        await callback.answer()

async def send_lessons():
    users = get_users()
    now = datetime.now()
    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: {now}")

    if not users:
        print("–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")

    for user_id, start_date_str, last_sent in users:
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–µ–Ω—å - {last_sent}")

        start_date = datetime.fromisoformat(start_date_str)
        days_passed = (now.date() - start_date.date()).days
        print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∏—Ö –¥–Ω—ñ–≤: {days_passed}")

        if days_passed >= len(lessons):
            print(f"–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.")
            continue

        if days_passed > last_sent or (days_passed == 0 and last_sent == 0):
            text = lessons[days_passed]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"complete:{days_passed}"),
                 InlineKeyboardButton(text="‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"incomplete:{days_passed}")]
            ])

            await bot.send_message(user_id, f"\U0001F4DA {text}", reply_markup=keyboard)
            update_last_sent(user_id, days_passed)
            print(f"–û–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–∞ {days_passed}")

            incomplete_days = get_incomplete_tasks(user_id)
            if incomplete_days:
                msg = "\U0001F4CC –£ —Ç–µ–±–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –¥–Ω—ñ:\n"
                for day in incomplete_days:
                    msg += f"- –î–µ–Ω—å {day + 1}: {lessons[day]}\n"
                msg += "\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /complete_task —â–æ–± –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ ‚úÖ"
                await bot.send_message(user_id, msg)

async def start_bot():
    if IS_TEST_MODE:
        print("–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º: –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥")
        scheduler.add_job(send_lessons, "interval", seconds=30)
    else:
        print(f"–ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ —á–∞—Å: {SEND_TIME.hour}:{SEND_TIME.minute}")
        scheduler.add_job(
            send_lessons,
            "cron",
            hour=SEND_TIME.hour,
            minute=SEND_TIME.minute,
            timezone=TIMEZONE
        )

    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot())