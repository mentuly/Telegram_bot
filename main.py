import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import BOT_TOKEN, IS_TEST_MODE, SEND_TIME, TIMEZONE
from database import add_user, get_users, update_last_sent, mark_incomplete, mark_complete, get_incomplete_tasks, update_user_name, get_user_name, resume_user, suspend_user, delete_user, get_suspended_until, is_user_suspended
from lessons import lessons
from datetime import datetime, timezone

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InputMediaPhoto
from datetime import datetime, time, timedelta

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

class RegisterStates(StatesGroup):
    waiting_for_name = State()

class SuspendLessonStates(StatesGroup):
    waiting_for_suspend_choice = State()

media = [
    InputMediaPhoto(
        media='https://drive.google.com/uc?export=view&id=10Q7kBwFLpcNXdX58XsFioGfpwBLyKsnn'
    ),
    InputMediaPhoto(
        media='https://drive.google.com/uc?export=view&id=18QbZcCVfiGfJ613-kIHspQYZgDZSh57e',
        caption='–¶—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è ‚Äî —è–∫ —Ç–µ–ø–ª–∞ –ø—ñ–¥–∫–∞–∑–∫–∞.\n–í–æ–Ω–∞ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ—á–∞—Ç–∏. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏. –Ü –Ω–µ –∑–Ω–∏–∫–∞—Ç–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∑–Ω–∏–∫(-–ª–∞) –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤.'
    ),
]

user_temp_messages = {}
user_suspend_messages = {}

@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    existing_users = [user[0] for user in get_users()]

    if user_id not in existing_users:
        add_user(user_id)
        await state.set_state(RegisterStates.waiting_for_name)
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏? üôÇ")
        return

    user_data = next((u for u in get_users() if u[0] == user_id), None)
    if user_data:
        suspended_until = user_data[3]
        if suspended_until is None or datetime.now() >= datetime.fromisoformat(suspended_until):
            user_name = get_user_name(user_id)
            if user_name:
                await send_intro_message(message, user_name)
            else:
                await state.set_state(RegisterStates.waiting_for_name)
                await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏? ‚ò∫Ô∏è")
        else:
            await message.answer(
                "–£ –≤–∞—Å —É–∂–µ –π–¥–µ –Ω–∞–≤—á–∞–Ω–Ω—è. –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –π–æ–≥–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /suspend_lesson ‚è∏Ô∏è"
            )

@dp.message(RegisterStates.waiting_for_name)
async def handle_name_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text.strip()
    update_user_name(user_id, user_name)

    await state.clear()
    await message.answer(f"–î—è–∫—É—é, {user_name}! –†–∞–¥—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤—É üöÄ")
    await bot.send_photo(
        chat_id=message.chat.id,
        photo='https://drive.google.com/uc?export=view&id=1wcsO799GbkFfDF3XrtRLijJWB_p3Eiua',
        caption='–î—è–∫—É—î–º–æ, —â–æ –≤–∏–±—Ä–∞–≤(-–ª–∞) –Ω–∞—Å.\n–ú–∏ –ø–æ—Ä—è–¥ ‚Äî —É –∫–æ–∂–Ω–æ–º—É —Ä–µ—á–µ–Ω–Ω—ñ, —è–∫–µ —Ç–∏ —â–µ —Å–∫–∞–∂–µ—à.\n–ö–æ–º–∞–Ω–¥–∞ Influbook üíõ'
    )

    await bot.send_media_group(chat_id=message.chat.id, media=media)

    await send_intro_message(message, user_name)

async def send_intro_message(message: Message, user_name: str):
    sent_msg = await message.answer(
        text=(
            f"–ù—É —â–æ –∂, {user_name} ‚Äî –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç–∞–≤.\n"
            "–ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∂–µ —á–µ–∫–∞—î.\n"
            "–ë–µ–∑ —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é. –ë–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω—å.\n"
            "–ü—Ä–æ—Å—Ç–æ —Ç–∏, —Ä—É—á–∫–∞ —ñ –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é.\n\n"
            "–ì–æ—Ç–æ–≤–∏–π(-–∞) –ø–æ—á–∞—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑?"
        ),
        reply_markup=start_keyboard().as_markup()
    )
    user_temp_messages[message.from_user.id] = sent_msg.message_id

def start_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –¢–∞–∫, –ø–æ—ó—Ö–∞–ª–∏!", callback_data="go_ahead")
    builder.button(text="üçµ –Ø —â–µ –∑ —á–∞—î–º, –Ω–∞—Å—Ç—Ä—ñ–π –ª–æ–≤–ª—é", callback_data="wait")
    builder.button(text="üôÉ –ù–µ —Å—å–æ–≥–æ–¥–Ω—ñ, –∞–ª–µ —è –ø–æ–≤–µ—Ä–Ω—É—Å—å", callback_data="not_today")
    builder.adjust(1)
    return builder

# @dp.message(Command("delete"))
# async def delete_account_handler(message: Message):
#     user_id = message.from_user.id
#     delete_user(user_id)
#     await message.answer("–¢–≤—ñ–π –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ")

@dp.message(Command("complete_task"))
async def complete_task_handler(message: Message):
    user_id = message.from_user.id
    incomplete_days = get_incomplete_tasks(user_id)

    if not incomplete_days:
        await message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å üéâ")
        return

    buttons = [
        [InlineKeyboardButton(text=f"–î–µ–Ω—å {day + 1}", callback_data=f"select_day:{day}")]
        for day in incomplete_days
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—Ç–µ –ø–æ–∑–Ω–∞—á–∏—Ç–∏:", reply_markup=keyboard)

@dp.message(Command("suspend_lesson"))
async def suspend_lesson_handler(message: Message):
    user_id = message.from_user.id
    users_data = get_users()
    user_data = next((u for u in users_data if u[0] == user_id), None)

    if not user_data:
        await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if user_data[3] == 1:
        text = "–ë–æ—Ç –≤–∂–µ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ."
    else:
        suspend_user(user_id)
        text = "–ë–æ—Ç –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. –ö–æ–ª–∏ –±—É–¥–µ—à –≥–æ—Ç–æ–≤–∏–π(-–∞) –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="resume_from_suspend")]
    ])
    sent_message = await message.answer(text, reply_markup=keyboard)

    if user_id not in user_suspend_messages:
        user_suspend_messages[user_id] = []
    user_suspend_messages[user_id].append(sent_message.message_id)

@dp.callback_query(F.data == "resume_from_suspend")
async def resume_from_suspend(callback: CallbackQuery):
    user_id = callback.from_user.id

    if user_id in user_suspend_messages:
        for msg_id in user_suspend_messages[user_id]:
            try:
                await bot.delete_message(chat_id=user_id, message_id=msg_id)
            except:
                pass
        del user_suspend_messages[user_id]

    resume_user(user_id)
    users_data = get_users()
    user_data = next((u for u in users_data if u[0] == user_id), None)

    if not user_data:
        await callback.message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    last_sent = user_data[2]
    next_day = last_sent + 1
    if next_day >= len(lessons):
        await callback.message.answer("–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å!")
        return

    text = lessons[next_day]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"complete:{next_day}"),
         InlineKeyboardButton(text="‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"incomplete:{next_day}")]
    ])
    await bot.send_message(user_id, f"\U0001F4DA {text}", reply_markup=keyboard)
    update_last_sent(user_id, next_day)
    await callback.answer("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚úÖ")

@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    data = callback.data
    user_id = callback.from_user.id

    if data.startswith("select_day:"):
        day = int(data.split(":")[1])
        text = f"\U0001F4CC –î–µ–Ω—å {day + 1}: {lessons[day]}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"complete:{day}"),
            InlineKeyboardButton(text="‚ùå –í—Å–µ —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"incomplete:{day}")
        ]])
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    elif data in ("wait", "not_today"):
        if user_id in user_temp_messages:
            try:
                await bot.delete_message(user_id, user_temp_messages[user_id])
            except:
                pass
            del user_temp_messages[user_id]

        text = (
            "–ê–±—Å–æ–ª—é—Ç–Ω–æ –æ–∫–µ–π. Influbook –Ω–µ —Ç—ñ–∫–∞—î. –ú–∏ —á–µ–∫–∞—Ç–∏–º–µ–º–æ —Ç–≤—ñ–π –∑–Ω–∞–∫ ‚òïÔ∏è"
            if data == "wait" else
            "–ì–æ–ª–æ–≤–Ω–µ ‚Äî –Ω–µ –∑–Ω–∏–∫ –Ω–∞–∑–∞–≤–∂–¥–∏. –ö–æ–ª–∏ –∑–∞—Ö–æ—á–µ—à ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ‚Äú—Å—Ç–∞—Ä—Ç‚Äù —ñ –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –∑ —Ç–æ–≥–æ, –¥–µ —Ç–∏ –∑—É–ø–∏–Ω–∏–≤—Å—è(-–ª–∞—Å—å) üåô"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úçÔ∏è –¢–∞–∫, –ø–æ—ó—Ö–∞–ª–∏!", callback_data="go_ahead")
        ]])

        sent_message = await callback.message.answer(text, reply_markup=keyboard)
        user_temp_messages[user_id] = sent_message.message_id
        await callback.answer()

    elif data == "go_ahead":
        if user_id in user_temp_messages:
            try:
                await bot.delete_message(user_id, user_temp_messages[user_id])
            except:
                pass
            del user_temp_messages[user_id]

        await callback.message.answer("–í–∞—É, –∫–ª–∞—Å! –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚Äî —Ç–≤–æ—è. Let's begin. ‚ú®")
        text = lessons[0]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data="complete:0"),
            InlineKeyboardButton(text="‚ùå –í—Å–µ —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ", callback_data="incomplete:0")
        ]])
        await callback.message.answer(f"\U0001F4DA {text}", reply_markup=keyboard)
        await callback.answer()

    elif data.startswith("complete:"):
        day = int(data.split(":")[1])
        mark_complete(user_id, day)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="ü•≥ü•≥ü•≥", callback_data="no_action")
        ]])
        await callback.message.edit_text(f"–î–µ–Ω—å {day + 1} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ! üéâ", reply_markup=keyboard)
        await callback.answer("–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚úÖ")

    elif data.startswith("incomplete:"):
        day = int(data.split(":")[1])
        mark_incomplete(user_id, day)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"complete:{day}")
        ]])
        await callback.message.edit_text(f"–î–µ–Ω—å {day + 1} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚ùå", reply_markup=keyboard)
        await callback.answer("–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–µ ‚ùå")

    elif data == "no_action":
        await callback.answer()

    elif data == "resume_now":
        await callback.message.delete()
        resume_user(user_id)
        users_data = get_users()
        user_data = next((u for u in users_data if u[0] == user_id), None)
        if not user_data:
            await callback.message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        last_sent = user_data[2]
        next_day = last_sent + 1
        if next_day >= len(lessons):
            await callback.message.answer("–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å!")
            return
        text = lessons[next_day]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"complete:{next_day}"),
            InlineKeyboardButton(text="‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"incomplete:{next_day}")
        ]])
        await bot.send_message(user_id, f"\U0001F4DA {text}", reply_markup=keyboard)
        update_last_sent(user_id, next_day)
        await callback.answer("–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–æ ‚úÖ")

    elif data == "resume_1100":
        await callback.message.delete()
        now = datetime.now()
        today_11am = datetime.combine(now.date(), time(11, 0))
        next_11am = today_11am + timedelta(days=1) if now >= today_11am else today_11am
        suspend_user(user_id, next_11am)
        await callback.answer(f"–ë—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –æ 11:00 ({next_11am.strftime('%H:%M')})")

def parse_suspended_until(suspended_until_str):
    if not suspended_until_str:
        return None
    dt = datetime.fromisoformat(suspended_until_str)
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    return dt

async def send_lessons():
    users = get_users()

    now = datetime.now(timezone.utc).astimezone()
    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: {now}")

    if not users:
        print("–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
        return

    for user_id, start_date_str, last_sent, suspended_until in users:
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–µ–Ω—å - {last_sent}")

        suspend_date = parse_suspended_until(suspended_until)
        if suspend_date and now < suspend_date:
            print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞ –ø–∞—É–∑—ñ –¥–æ {suspend_date}")
            continue

        start_date = datetime.fromisoformat(start_date_str)
        if start_date.tzinfo is None:
            start_date = start_date.replace(tzinfo=timezone.utc)

        days_passed = (now.date() - start_date.date()).days
        print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∏—Ö –¥–Ω—ñ–≤: {days_passed}")

        if days_passed >= len(lessons):
            print(f"–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.")
            continue

        if days_passed > last_sent or (days_passed == 0 and last_sent == 0):
            text = lessons[days_passed]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[ 
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"complete:{days_passed}"),
                InlineKeyboardButton(text="‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"incomplete:{days_passed}")
            ]])

            await bot.send_message(user_id, f"\U0001F4DA {text}", reply_markup=keyboard)
            update_last_sent(user_id, days_passed)
            print(f"–û–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–∞ {days_passed}")

            incomplete_days = get_incomplete_tasks(user_id)
            if incomplete_days:
                msg = "\U0001F4CC –£ —Ç–µ–±–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –¥–Ω—ñ:\n"
                for day in incomplete_days:
                    msg += f"- –î–µ–Ω—å {day + 1}: {lessons[day]}\n"
                msg += "\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /complete_task —â–æ–± –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ ‚úÖ"
                await bot.send_message(user_id, msg)

async def start_bot():
    if IS_TEST_MODE:
        print("–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º: –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥")
        scheduler.add_job(send_lessons, "interval", seconds=30)
    else:
        print(f"–ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ —á–∞—Å: {SEND_TIME.hour}:{SEND_TIME.minute}")
        scheduler.add_job(
            send_lessons,
            "cron",
            hour=SEND_TIME.hour,
            minute=SEND_TIME.minute,
            timezone=TIMEZONE
        )

    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot())